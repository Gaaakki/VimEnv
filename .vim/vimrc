"==================================
""    Vim基本配置
"===================================
""关闭vi的一致性模式 避免以前版本的一些Bug和局限
set nocompatible
""主题配色
set background=dark
colorscheme solarized
""显示行号
set number
"设置在编辑过程中右下角显示光标的行列信息
set ruler
""在状态栏显示正在输入的命令
"set showcmd
"搜索时高亮显示
set hls 
"突出现实当前行列
set cursorline
"set cursorcolumn
""设置匹配模式 类似当输入一个左括号时会匹配相应的那个右括号
set showmatch
"设置C/C++方式自动对齐
set autoindent
set cindent
set smartindent 
""开启语法高亮功能
syntax enable
syntax on
"指定配色方案为256色
set t_Co=256
""设置搜索时忽略大小写
set ignorecase
"设置在Vim中可以使用鼠标 防止在Linux终端下无法拷贝
"set mouse=a
""设置Tab宽度
set tabstop=2
"设置自动对齐空格数
set shiftwidth=2
""设置按退格键时可以一次删除4个空格
set softtabstop=2
"设置按退格键时可以一次删除4个空格
"set smarttab
""将Tab键自动转换成空格 真正需要Tab键时使用[Ctrl + V + Tab]
set expandtab
"设置编码方式
set termencoding=utf-8
set encoding=utf-8
""自动判断编码时 依次尝试一下编码
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
"检测文件类型
filetype off

set tags=./.tags;,.tags

"==================================
""    Vim 插件配置
"===================================

" plug-vim
""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin("~/Env/vim/plugged")

" 自动索引
Plug 'ludovicchabant/vim-gutentags'
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'
" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" 导航栏
Plug 'scrooloose/nerdtree'
let NERDTreeWinPos='right'
let NERDTreeWinSize=30
map <F8> :NERDTreeToggle<CR>

" tag栏
Plug 'CatKang/taglist.vim'
let Tlist_Ctags_Cmd='ctags'
let Tlist_Show_One_File=1               "不同时显示多个文件的tag，只显示当前文件的
let Tlist_WinWidth =30                   "设置taglist的宽度
let Tlist_Exit_OnlyWindow=1             "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Left_Window=1           "在右侧窗口中显示taglist窗口
let Tlist_Auto_Open=1
let Tlist_Auto_Update=1
let Tlist_Sort_Type="name"
let Tlist_Process_File_Always=1         "taglist始终解析文件中的tag，不管taglist是否打开
map <c-]> g<c-]>
"let Tlist_Enable_Fold_Column=1
nnoremap <silent> <F2> :TlistToggle<CR>

" 异步编译
Plug 'skywind3000/asyncrun.vim'
" 自动打开 quickfix window ，高度为 6
let g:asyncrun_open = 6
" 任务结束时候响铃提醒
let g:asyncrun_bell = 1
" 设置 F10 打开/关闭 Quickfix 窗口
nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>
" 设置 F7 使用 make 编译项目
nnoremap <silent> <F7> :AsyncRun -cwd=<root> make <cr>
" 设置根据特定文件找到项目根目录
let g:asyncrun_rootmarks = ['.svn', '.git', '.root', '_darcs', 'build.xml'] 

Plug 'bling/vim-airline'
set laststatus=2
"let g:airline_theme="molokai"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0    " 关闭状态显示空白符号计数
let g:airline#extensions#whitespace#symbol = '!'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

" 颜色
Plug 'altercation/vim-colors-solarized'
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"

"Plug 'tpope/vim-fugitive'

Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1

Plug 'Raimondi/delimitMate' "自动补全括号引号 
Plug 'kien/rainbow_parentheses.vim' "括号显示增强

Plug 'ervandew/supertab'

call plug#end()            " required

au BufNewFile,BufRead *.ic set filetype=c
set backspace=2

" =================== cscope setting =====================
" cscope高亮
hi Modemsg ctermfg=magenta

" 设置 leader 键，例子为空号键，也可以设置为其他的
let mapleader=","

if has("cscope")
    set csprg=/usr/local/bin/cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
endif
" s: 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
nmap <Leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>
" g: 查找函数、宏、枚举等定义的位置
nmap <Leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>
" d: 查找本函数调用的函数
nmap <Leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>
" c: 查找调用本函数的函数
nmap <Leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>
" t: 查找指定的字符串
nmap <Leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>
" e: 查找egrep模式，相当于egrep功能，但查找速度快多了
nmap <Leader>e :cs find e <C-R>=expand("<cword>")<CR><CR>
" f: 查找并打开文件，类似vim的find功能
nmap <Leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
" i: 查找包含本文件的文件
nmap <Leader>i :cs find i <C-R>=expand("<cfile>")<CR><CR>

" =================== cscope setting end =================


